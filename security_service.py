# -*- coding: utf-8 -*-
"""security-service

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zABVrwDwZa2vZV8taHsQW3w-s_yX2KGY
"""

from flask import Flask, request, jsonify
from datetime import datetime, timedelta
from collections import defaultdict
import logging
import os

app = Flask(__name__)

# Настройка логирования
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Список подозрительных ключей (пример)
SUSPICIOUS_KEYS = ['malicious', 'attack', 'inject']

# Словарь для хранения количества запросов от каждого IP
ip_request_count = defaultdict(int)
ip_request_timestamps = defaultdict(list)
blocked_ips = set()

@app.before_request
def check_security():
    ip = request.remote_addr
    now = datetime.now()

    # Проверка на блокировку IP
    if ip in blocked_ips:
        logging.warning(f"IP {ip} blocked: in blacklist.")
        return jsonify({"status": "blocked", "reason": "IP in blacklist"}), 403

    # Проверка на частые запросы
    ip_request_timestamps[ip] = [t for t in ip_request_timestamps[ip] if now - t < timedelta(minutes=1)]
    ip_request_timestamps[ip].append(now)

    if len(ip_request_timestamps[ip]) > 10:  # Например, 10 запросов в минуту
        blocked_ips.add(ip)
        logging.warning(f"IP {ip} blocked: too many requests.")
        return jsonify({"status": "blocked", "reason": "too many requests"}), 403

@app.route('/check', methods=['POST'])
def check_request():
    """
    Микросервис проверяет входящий запрос на наличие подозрительных данных.
    Если запрос содержит подозрительные данные, он блокируется.
    """
    data = request.json  # Получаем данные из запроса

    # Логируем запрос
    logging.info(f"Received request: {data}")

    # Проверяем данные на наличие подозрительных ключей
    for key in SUSPICIOUS_KEYS:
        if key in str(data):  # Проверяем, есть ли подозрительный ключ в данных
            logging.warning(f"Request blocked: suspicious key '{key}' found.")
            return jsonify({"status": "blocked", "reason": f"suspicious key '{key}' found"}), 403

    # Если запрос безопасен, разрешаем его
    logging.info("Request allowed.")
    return jsonify({"status": "allowed"}), 200

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8080)  # Replit использует порт 8080